package com.sovereign_rise.app.domain.usecase.task

import com.sovereign_rise.app.domain.model.Task
import com.sovereign_rise.app.domain.model.TaskDifficulty
import com.sovereign_rise.app.domain.model.TaskStatus
import com.sovereign_rise.app.domain.repository.TaskRepository
import com.sovereign_rise.app.domain.usecase.base.BaseUseCase
import com.sovereign_rise.app.util.Constants
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers

/**
 * Use case for creating new tasks.
 */
class CreateTaskUseCase(
    private val taskRepository: TaskRepository,
    dispatcher: CoroutineDispatcher = Dispatchers.IO
) : BaseUseCase<CreateTaskUseCase.Params, Task>(dispatcher) {
    
    override suspend fun execute(params: Params): Task {
        // Validation
        if (params.title.isBlank()) {
            throw IllegalArgumentException(Constants.ERROR_TASK_TITLE_TOO_SHORT)
        }
        if (params.title.length < Constants.MIN_TASK_TITLE_LENGTH) {
            throw IllegalArgumentException(Constants.ERROR_TASK_TITLE_TOO_SHORT)
        }
        if (params.title.length > Constants.MAX_TASK_TITLE_LENGTH) {
            throw IllegalArgumentException(Constants.ERROR_TASK_TITLE_TOO_LONG)
        }
        if (params.description != null && params.description.length > Constants.MAX_TASK_DESCRIPTION_LENGTH) {
            throw IllegalArgumentException(Constants.ERROR_TASK_DESCRIPTION_TOO_LONG)
        }
        if (params.reminderTime != null && params.reminderTime <= System.currentTimeMillis()) {
            throw IllegalArgumentException(Constants.ERROR_REMINDER_IN_PAST)
        }
        
        // Create task object
        val task = Task(
            id = "", // Will be generated by backend
            userId = "", // Will be set by backend from auth token
            title = params.title,
            description = params.description,
            status = TaskStatus.PENDING,
            difficulty = params.difficulty,
            reminderTime = params.reminderTime,
            createdAt = System.currentTimeMillis(),
            completedAt = null,
            isMissed = false
        )
        
        // Call repository to create task
        return taskRepository.createTask(task)
    }
    
    data class Params(
        val title: String,
        val description: String?,
        val difficulty: TaskDifficulty,
        val reminderTime: Long?
    )
}

